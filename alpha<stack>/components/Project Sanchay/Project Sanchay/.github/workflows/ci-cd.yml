name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*' # Trigger release job on tags like v1.0.0, v1.0.0-beta.1
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  # -------------------------------------------------------------------------
  # Job 1: Lint & Format Check
  # Checks code style and formatting for both Python and Rust components.
  # -------------------------------------------------------------------------
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort

      - name: Run Black (Python formatter)
        run: black --check src/sanchay_app/ tests/

      - name: Run Isort (Python import sorter)
        run: isort --check-only src/sanchay_app/ tests/

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Run Cargo fmt (Rust formatter)
        run: cargo fmt --all -- --check
        working-directory: crates/sanchay_core

      - name: Run Cargo clippy (Rust linter)
        run: cargo clippy -- -D warnings
        working-directory: crates/sanchay_core

  # -------------------------------------------------------------------------
  # Job 2: Test
  # Runs unit and integration tests for Python and Rust components.
  # -------------------------------------------------------------------------
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install Maturin and Python test/app dependencies
        run: |
          pip install --upgrade pip
          pip install maturin pytest PySide6 # Include PySide6 as it's a core dependency
        working-directory: .

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            crates/sanchay_core/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('crates/sanchay_core/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run Rust tests
        run: cargo test
        working-directory: crates/sanchay_core

      - name: Build Rust core wheel
        # maturin builds the platform-specific Python wheel for sanchay_core
        run: maturin build --release --strip
        working-directory: crates/sanchay_core

      - name: Install Rust core wheel
        # Find the generated .whl file and install it into the Python environment
        run: |
          WHEEL_PATH=$(find crates/sanchay_core/target/wheels/ -name "sanchay_core-*-py3-*.whl")
          pip install "${WHEEL_PATH}"
        working-directory: .

      - name: Run Python tests
        # Pytest will automatically discover tests in the 'tests/' directory
        run: pytest tests/
        working-directory: .

  # -------------------------------------------------------------------------
  # Job 3: Build & Package (Cross-Platform)
  # Builds the Rust core and packages the Python application into standalone
  # executables for Windows, macOS, and Linux using PyInstaller.
  # -------------------------------------------------------------------------
  build:
    name: Build (${{ matrix.os }})
    needs: [lint, test] # Ensure linting and testing pass before building
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Allow other OS builds to continue if one fails
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install Maturin and PyInstaller
        run: |
          pip install --upgrade pip
          pip install maturin pyinstaller
        working-directory: .

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            crates/sanchay_core/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('crates/sanchay_core/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build Rust core wheel
        run: maturin build --release --strip
        working-directory: crates/sanchay_core

      - name: Install Rust core wheel and Python application dependencies
        run: |
          WHEEL_PATH=$(find crates/sanchay_core/target/wheels/ -name "sanchay_core-*-py3-*.whl")
          pip install "${WHEEL_PATH}"
          pip install PySide6 # Install the UI framework and other runtime dependencies
        working-directory: .

      - name: Package application with PyInstaller (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          pyinstaller --noconfirm --onefile \
            --name "Sanchay" \
            --add-data "assets:assets" \
            --add-data "src/sanchay_app:sanchay_app" \
            --hidden-import "sanchay_core" \
            --icon "assets/icons/app_icon.png" \
            src/sanchay_app/__main__.py
        working-directory: .

      - name: Package application with PyInstaller (Windows)
        if: runner.os == 'Windows'
        run: |
          pyinstaller --noconfirm --onefile \
            --name "Sanchay" \
            --add-data "assets;assets" \
            --add-data "src/sanchay_app;sanchay_app" \
            --hidden-import "sanchay_core" \
            --icon "assets/icons/app_icon.png" \
            src/sanchay_app/__main__.py
        working-directory: .
        shell: pwsh # Use PowerShell for Windows runner for robust path handling

      - name: Rename executable for clarity
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            mv dist/Sanchay dist/Sanchay-Linux
          elif [ "${{ runner.os }}" == "macOS" ]; then
            mv dist/Sanchay dist/Sanchay-macOS
          elif [ "${{ runner.os }}" == "Windows" ]; then
            mv dist/Sanchay.exe dist/Sanchay-Windows.exe
          fi
        working-directory: .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Sanchay-executables-${{ matrix.os }}
          path: dist/

  # -------------------------------------------------------------------------
  # Job 4: Release
  # Creates a GitHub Release and uploads the built executables as assets.
  # This job is triggered only when a tag (e.g., v1.0.0) is pushed.
  # -------------------------------------------------------------------------
  release:
    name: Create Release
    needs: build # Depends on all build jobs completing successfully
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') # Only run when a tag is pushed

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Downloads artifacts into an 'artifacts' directory

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            artifacts/Sanchay-executables-ubuntu-latest/*
            artifacts/Sanchay-executables-macos-latest/*
            artifacts/Sanchay-executables-windows-latest/*