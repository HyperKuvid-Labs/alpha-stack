# This file serves as an example for environment variables required by Project Sanchay.
# Copy this file to '.env' in the root project directory (project-sanchay/.env)
# and populate with your actual values.
# Variables defined here will be loaded by the application for local development.
# IMPORTANT: Do NOT commit your actual .env file with sensitive credentials to version control.

# --- Application Environment Settings ---
# SANCHAY_ENV: Defines the application environment (e.g., 'development', 'production').
# This helps the config system load environment-specific settings from the 'config/' directory.
# Uncomment and set to 'production' for production-like behavior (e.g., different logging, database).
# SANCHAY_ENV=development

# LOG_LEVEL: Sets the minimum level for logging messages.
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# --- Database Configuration ---
# DATABASE_PATH: Path to the SQLite database file.
# This is the default for local development and initial deployments.
DATABASE_PATH=./sanchay_metadata.db

# Example for PostgreSQL (uncomment and configure if using PostgreSQL locally):
# POSTGRES_HOST=localhost
# POSTGRES_PORT=5432
# POSTGRES_USER=sanchay_user
# POSTGRES_PASSWORD=sanchay_password
# POSTGRES_DB=sanchay_db

# --- Cloud Storage Configuration (Optional) ---
# Configure credentials for AWS S3 or MinIO if you plan to process files from object storage.
# For production deployments, these credentials should ideally be managed by a dedicated secrets manager
# (e.g., AWS Secrets Manager, HashiCorp Vault) and NOT stored directly in .env files.

# AWS S3 Configuration:
# AWS_ACCESS_KEY_ID=YOUR_AWS_ACCESS_KEY_ID
# AWS_SECRET_ACCESS_KEY=YOUR_AWS_SECRET_ACCESS_KEY
# AWS_REGION=us-east-1
# AWS_S3_BUCKET_NAME=your-sanchay-bucket-name

# MinIO Configuration:
# MINIO_ENDPOINT=http://localhost:9000
# MINIO_ACCESS_KEY=YOUR_MINIO_ACCESS_KEY
# MINIO_SECRET_KEY=YOUR_MINIO_SECRET_KEY
# MINIO_BUCKET_NAME=your-sanchay-minio-bucket-name

# --- API Server Configuration (Optional, for headless/FastAPI mode) ---
# API_PORT: The port on which the FastAPI server will listen if enabled (e.g., for CLI or web API).
# API_PORT=8000