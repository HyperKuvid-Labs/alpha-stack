#!/bin/bash

# clean.sh
# This script automates the process of cleaning the project workspace by removing temporary files
# and build artifacts generated by Rust, Python, and packaging tools.

# Exit immediately if a command exits with a non-zero status.
set -euo pipefail

echo "Project Sanchay: Initiating workspace cleanup..."

# --- Navigate to the project root directory ---
# This script is expected to be located in 'project-sanchay/scripts/'.
# We need to change the current directory to 'project-sanchay/' to ensure all deletions
# are relative to the project root.
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
cd "$PROJECT_ROOT" || { echo "Error: Could not navigate to project root: $PROJECT_ROOT"; exit 1; }

echo "Current working directory set to: $(pwd)"

# --- Clean Rust build artifacts ---
echo ""
echo "Cleaning Rust build artifacts (target/ directories)..."
# Find and remove the 'target/' directory within the sanchay_core crate.
if find "crates/sanchay_core" -maxdepth 2 -type d -name "target" -print -quit | grep -q .; then
    find "crates/sanchay_core" -maxdepth 2 -type d -name "target" -exec rm -rf {} +
    echo "  - Removed 'crates/sanchay_core/target/'."
else
    echo "  - No 'crates/sanchay_core/target/' directory found."
fi

# --- Clean Python build artifacts and environments ---
echo ""
echo "Cleaning Python build artifacts..."

# Remove __pycache__ directories
echo "  - Removing all '__pycache__' directories..."
if find . -type d -name "__pycache__" -print -quit | grep -q .; then
    find . -type d -name "__pycache__" -exec rm -rf {} +
    echo "    Removed '__pycache__' directories successfully."
else
    echo "    No '__pycache__' directories found."
fi

# Remove virtual environment
echo "  - Checking for 'venv/' virtual environment..."
if [ -d "venv" ]; then
    rm -rf venv
    echo "    Removed 'venv' virtual environment."
else
    echo "    No 'venv' virtual environment found."
fi

# Remove Maturin/packaging distribution and build directories
echo "  - Checking for 'dist/' directory (Maturin wheels, packaged executables)..."
if [ -d "dist" ]; then
    rm -rf dist
    echo "    Removed 'dist/' directory."
else
    echo "    No 'dist/' directory found."
fi

echo "  - Checking for 'build/' directory (packaging build files)..."
if [ -d "build" ]; then
    rm -rf build
    echo "    Removed 'build/' directory."
else
    echo "    No 'build/' directory found."
fi

# Remove pytest cache directory
echo "  - Checking for '.pytest_cache/' directory..."
if [ -d ".pytest_cache" ]; then
    rm -rf .pytest_cache
    echo "    Removed '.pytest_cache/' directory."
else
    echo "    No '.pytest_cache/' directory found."
fi

# --- Clean Database and Log files ---
echo ""
echo "Cleaning database files and generic log files..."

# Remove SQLite database file (as per .env.example configuration)
echo "  - Checking for 'sanchay_metadata.db' (SQLite database file)..."
if [ -f "sanchay_metadata.db" ]; then
    rm -f sanchay_metadata.db
    echo "    Removed 'sanchay_metadata.db'."
else
    echo "    No 'sanchay_metadata.db' found."
fi

# Remove generic log files in the project root
echo "  - Removing any '*.log' files in the project root..."
# Use shopt -s nullglob to ensure glob expands to nothing if no matches, preventing errors.
shopt -s nullglob
LOG_FILES=(*.log)
if (( ${#LOG_FILES[@]} )); then
    rm -f "${LOG_FILES[@]}"
    echo "    Removed '${LOG_FILES[*]}'."
else
    echo "    No '*.log' files found."
fi
shopt -u nullglob # Turn off nullglob

echo ""
echo "Project Sanchay: Workspace cleaning complete."