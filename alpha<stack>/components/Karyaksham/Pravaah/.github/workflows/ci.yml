name: CI Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  lint_and_test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pdm'

      - name: Install PDM
        run: pip install pdm

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy, rustfmt

      - name: Install Python dependencies (backend)
        working-directory: backend
        run: pdm install --no-self --group dev

      - name: Run Python linters
        working-directory: backend
        run: |
          pdm run ruff check src/
          pdm run black --check src/

      - name: Build Rust engine wheel
        working-directory: rust_engine
        run: maturin build --release

      - name: Install Rust wheel into Python environment for tests
        working-directory: backend
        run: |
          WHEEL_PATH=$(find ../rust_engine/target/wheels/ -name "*.whl" -print -quit)
          if [ -z "$WHEEL_PATH" ]; then
            echo "Error: Rust wheel not found after build."
            exit 1
          fi
          echo "Installing Rust wheel: $WHEEL_PATH"
          pdm add "$WHEEL_PATH" --no-sync

      - name: Run Python tests
        working-directory: backend
        run: pdm run pytest tests/python/

      - name: Run Rust linters
        working-directory: rust_engine
        run: |
          cargo clippy -- -D warnings
          cargo fmt --check

      - name: Run Rust tests
        working-directory: rust_engine
        run: cargo test

  build_docker_image:
    runs-on: ubuntu-latest
    needs: lint_and_test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/karyaksham-api:latest
            ghcr.io/${{ github.repository }}/karyaksham-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max