```typescript
import React from 'react';

/**
 * Props for the Button component.
 * Extends standard HTML button attributes to allow native button props.
 */
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  /**
   * The content to be displayed inside the button.
   */
  children: React.ReactNode;
  /**
   * Visual style of the button.
   * @default 'primary'
   */
  variant?: 'primary' | 'secondary' | 'danger' | 'text';
  /**
   * Size of the button.
   * @default 'medium'
   */
  size?: 'small' | 'medium' | 'large';
  /**
   * If true, the button will be disabled.
   * @default false
   */
  disabled?: boolean;
  /**
   * Optional click handler for the button.
   */
  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;
  /**
   * Additional CSS class names to apply to the button.
   */
  className?: string;
  /**
   * If true, the button will take up the full width of its container.
   * @default false
   */
  fullWidth?: boolean;
}

/**
 * A versatile Button component designed for reuse across the application.
 * It provides different visual styles (variants), sizes, and states.
 * This component is structured to be easily styled using a utility-first CSS approach.
 */
const Button: React.FC<ButtonProps> = ({
  children,
  variant = 'primary',
  size = 'medium',
  disabled = false,
  onClick,
  className,
  fullWidth = false,
  ...rest
}) => {
  // Base styles applied to all buttons
  const baseStyles = [
    'font-sans',
    'font-medium',
    'rounded-md',
    'transition-colors',
    'duration-150',
    'ease-in-out',
    'focus:outline-none',
    'focus:ring-2',
    'focus:ring-offset-2',
    'active:scale-[0.98]', // Provides a subtle press effect
  ];

  // Variant-specific styles
  const variantStyles = {
    primary: [
      'bg-blue-600',
      'hover:bg-blue-700',
      'text-white',
      'focus:ring-blue-500',
    ],
    secondary: [
      'bg-gray-200',
      'hover:bg-gray-300',
      'text-gray-800',
      'focus:ring-gray-500',
    ],
    danger: [
      'bg-red-600',
      'hover:bg-red-700',
      'text-white',
      'focus:ring-red-500',
    ],
    text: [
      'bg-transparent',
      'hover:bg-gray-100',
      'text-blue-600',
      'focus:ring-blue-500',
    ],
  };

  // Size-specific styles
  const sizeStyles = {
    small: [
      'px-3',
      'py-1.5',
      'text-sm',
    ],
    medium: [
      'px-4',
      'py-2',
      'text-base',
    ],
    large: [
      'px-6',
      'py-3',
      'text-lg',
    ],
  };

  // Styles for the disabled state
  const disabledStyles = [
    'opacity-50',
    'cursor-not-allowed',
    'pointer-events-none', // Prevents interaction events when disabled
  ];

  // Full width style conditional
  const fullWidthStyle = fullWidth ? 'w-full' : '';

  // Combine all class names into a single string
  const combinedClasses = [
    ...baseStyles,
    ...(variantStyles[variant] || variantStyles.primary), // Fallback to primary if variant is undefined
    ...(sizeStyles[size] || sizeStyles.medium), // Fallback to medium if size is undefined
    ...(disabled ? disabledStyles : []),
    fullWidthStyle,
    className, // Allow external classes to be passed and potentially override
  ].filter(Boolean).join(' ').trim(); // Filter out any empty strings and join with spaces

  return (
    <button
      className={combinedClasses}
      onClick={onClick}
      disabled={disabled}
      {...rest} // Spreads any other standard HTML button attributes (e.g., type="submit", name)
    >
      {children}
    </button>
  );
};

export default Button;
```