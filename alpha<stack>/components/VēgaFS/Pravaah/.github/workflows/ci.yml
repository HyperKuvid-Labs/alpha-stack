name: CI Pipeline for VÄ“gaFS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint_and_format:
    name: Lint & Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt
          profile: minimal
          override: true

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Python linting/formatting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort

      - name: Run Rustfmt
        run: cargo fmt --check

      - name: Run Clippy
        run: cargo clippy -- -D warnings

      - name: Run Black
        run: black --check .

      - name: Run Isort
        run: isort --check-only .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint_and_format

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Maturin
        run: pip install maturin

      - name: Install Python dependencies and build Rust core (for testing)
        # maturin develop builds the Rust core in debug mode and installs the Python package in editable mode
        run: maturin develop -v

      - name: Run Rust tests
        # Assumes rust_core/Cargo.toml is the main Rust project
        run: cargo test

      - name: Run Python tests
        run: pytest tests/

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Rust dependencies (for build)
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache Python dependencies (for build)
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Maturin
        run: pip install maturin

      - name: Build Rust wheel (release mode)
        # This will put the wheel into ./target/wheels based on pyproject.toml configuration
        run: maturin build --release

      - name: Build Docker image
        run: |
          docker build -t vegafs:${{ github.sha }} -t vegafs:latest .
          # Uncomment the lines below to push to a Docker registry (e.g., Docker Hub, AWS ECR)
          # if your workflow is configured with credentials.
          # docker push vegafs:${{ github.sha }}
          # docker push vegafs:latest